üìù Reflection: Arrays and Strings in C

While studying arrays and strings in C, I gained a deeper understanding of how data is stored, accessed, and manipulated at a low level.

Arrays taught me the importance of contiguous memory allocation and how powerful indexing can be when working with collections of elements. With 1D arrays, I practiced solving problems like finding the maximum, reversing an array, and merging sorted arrays. With 2D arrays, I realized how matrices are represented in row-major order and how simple operations like transposition or multiplication can be implemented through nested loops. These exercises reinforced my logical thinking and problem-solving abilities.

Strings in C added another layer of complexity since they are essentially character arrays terminated by the null character '\0'. I explored both manual string manipulation (like reversing, palindrome checking, and counting vowels) and standard string library functions (strlen, strcpy, strcat, strcmp, etc.). This helped me appreciate the balance between implementing algorithms myself and leveraging built-in functions for efficiency.

A key insight was the distinction between character arrays and char pointers. Character arrays are mutable, whereas string literals pointed to by char* are stored in read-only memory. This clarified why modifying string literals often causes runtime errors. It also highlighted how memory management in C requires extra attention compared to high-level languages.

Overall, this topic not only strengthened my C programming fundamentals but also improved my awareness of memory representation, pointer usage, and safe string handling. I can now see how arrays and strings form the foundation for more advanced concepts such as data structures, system programming, and embedded development.
